c
rules_without_percent_discount.nil?
rules_without_percent_discount.size
rules_without_percent_discount.empty?
rules_without_percent_discount.nil?
rules_without_percent_discount
n
@rules
c
@rules.count
@rules
c
exit
store.find('004')
store.products_quantity
store.add_product('004', 'sample product', 'Â£23.02')
store
exit
lavendar_heart_one
lavendar_heart
rule
discount_rule
rule
exit
c
(81.95 - (total_amount * discount_percent)).round(2)
81.95 - (total_amount * discount_percent)
(total_amount * discount_percent)
discount_percent
total_amount
exit
total_amount - 7.42
total_amount
(discount_percent * 74.2).round(2)
discount_percent * 74.2
discount_percent
total_amount
exit
n
rules_excluding_percent_discount_rule(@rules).each{ |rule| rule.apply(@items) }
n
c
has_percent_discount_rule?(@rules)
exit
rules - [select_percent_discount_rule(rules)]
exit
select_percent_discount_rule(rules)
rules
exit
@rules.select {|rule| rule.class == PercentDiscountRule }
@rules - @rules.select {|rule| rule.class == PercentDiscountRule }
@rules.any? {|rule| rule.class == PercentDiscountRule }
@rules.select {|rule| rule.class == PercentDiscountRule }
@rules[1].class == PercentDiscountRule
@rules[1].class
@rules[1]
@rules.class
@rules.include?(PercentDiscountRule)
@rules.includes?(PercentDiscountRule)
@rules
c
items
c
exit
c
total_amount - ( (total_amount * discount_percent).round(2) )
eligibile?(total_amount)
total_amount
c
(total_amount - ((total_amount * discount_percent).round(2))) if total_amount > Numeric.formatted_price(threshold_amount)
total_amount
c
total_amount_after_discount = (total_amount - (total_amount * discount_percent).round(2)) if total_amount > Numeric.formatted_price(threshold_amount)
total_amount = items.inject(0.0){ |total, item| total += Numeric.formatted_price(item.price)}
c
total_amount > Numeric.formatted_price(threshold_amount)
total_amount
total_amount = items.inject(0.0){ |total, item| total += Numeric.formatted_price(item.price)}
items
exit
items
total_amount = items.inject(0.0){ |total, item| total += Numeric.formatted_price(item.price)}
c
total_amount = items.inject(0.0){ |total, item| total += Numeric.formatted_price(item.price)}
items
c
total_amount
exit
@items.inject(0.0){ |total, item| total += Item.format_price(item.price)}
n
c
@items.inject(0.0){ |total, item| p total.class, item.price}
@items.inject(0.0){ |total, item| p total, item.price}
@items.inject(0.0){ |total, item| p total, item}
@items
@items.inject(0.0){ |total, item| total += item.price}
@rules.each{ |rule| rule.apply(@items) }
@rules
exit
@rules
exit
@rules
c
products[0].code
products[0]
products
